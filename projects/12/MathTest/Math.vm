function Math.init 2
  // let
  push constant 16
  call Array.new 1
  pop static 0
  // let
  push constant 0
  pop local 0
  // let
  push constant 1
  pop local 1
  // while
label WHILE0L1
  push local 0
  push constant 16
  lt
  not
  if-goto WHILE0L2
  // let
  push static 0
  push local 0
  add
  push local 1
  pop temp 0
  pop pointer 1
  push temp 0
  pop that 0
  // let
  push local 0
  push constant 1
  add
  pop local 0
  // let
  push local 1
  push local 1
  add
  pop local 1
  goto WHILE0L1
label WHILE0L2
  // return
  push constant 0
  return
function Math.abs 0
  // if
  push argument 0
  push constant 0
  lt
  not
  if-goto IF0L1
  // return
  push argument 0
  neg
  return
  goto IF0L2
label IF0L1
  // return
  push argument 0
  return
label IF0L2
function Math.bit 0
  // return
  push static 0
  push argument 1
  add
  pop pointer 1
  push that 0
  push argument 0
  and
  push constant 0
  gt
  return
function Math.multiply 4
  // if
  push argument 1
  push constant 0
  lt
  not
  if-goto IF1L1
  // let
  push argument 1
  neg
  pop argument 1
  // let
  push constant 1
  neg
  pop local 3
  goto IF1L2
label IF1L1
label IF1L2
  // let
  push constant 0
  pop local 0
  // let
  push argument 0
  pop local 1
  // let
  push constant 0
  pop local 2
  // while
label WHILE1L1
  push local 2
  push constant 16
  lt
  not
  if-goto WHILE1L2
  // if
  push argument 1
  push local 2
  call Math.bit 2
  not
  if-goto IF2L1
  // let
  push local 0
  push local 1
  add
  pop local 0
  goto IF2L2
label IF2L1
label IF2L2
  // let
  push local 1
  push local 1
  add
  pop local 1
  // let
  push local 2
  push constant 1
  add
  pop local 2
  goto WHILE1L1
label WHILE1L2
  // if
  push local 3
  not
  if-goto IF3L1
  // let
  push local 0
  neg
  pop local 0
  goto IF3L2
label IF3L1
label IF3L2
  // return
  push local 0
  return
function Math.pow 1
  // let
  push constant 1
  pop local 0
  // while
label WHILE2L1
  push argument 1
  push constant 0
  gt
  not
  if-goto WHILE2L2
  // let
  push local 0
  push argument 0
  call Math.multiply 2
  pop local 0
  // let
  push argument 1
  push constant 1
  sub
  pop argument 1
  goto WHILE2L1
label WHILE2L2
  // return
  push local 0
  return
function Math.divide 6
  // let
  push constant 0
  pop local 5
  // if
  push argument 0
  push constant 0
  lt
  not
  if-goto IF4L1
  // let
  push argument 0
  neg
  pop argument 0
  // let
  push constant 1
  neg
  pop local 5
  goto IF4L2
label IF4L1
label IF4L2
  // if
  push argument 1
  push constant 0
  lt
  not
  if-goto IF5L1
  // let
  push argument 1
  neg
  pop argument 1
  // let
  push local 5
  not
  pop local 5
  goto IF5L2
label IF5L1
label IF5L2
  // if
  push argument 0
  push constant 10
  lt
  not
  if-goto IF6L1
  // let
  push constant 0
  pop local 0
  goto IF6L2
label IF6L1
  // if
  push argument 0
  push constant 100
  lt
  not
  if-goto IF7L1
  // let
  push constant 1
  pop local 0
  goto IF7L2
label IF7L1
  // if
  push argument 0
  push constant 1000
  lt
  not
  if-goto IF8L1
  // let
  push constant 2
  pop local 0
  goto IF8L2
label IF8L1
  // if
  push argument 0
  push constant 10000
  lt
  not
  if-goto IF9L1
  // let
  push constant 3
  pop local 0
  goto IF9L2
label IF9L1
  // let
  push constant 4
  pop local 0
label IF9L2
label IF8L2
label IF7L2
label IF6L2
  // let
  push constant 0
  pop local 4
  // while
label WHILE3L1
  push local 0
  push constant 1
  neg
  gt
  not
  if-goto WHILE3L2
  // let
  push constant 10
  push local 0
  call Math.pow 2
  pop local 1
  // let
  push constant 0
  pop local 2
  // let
  push local 1
  push local 2
  push constant 1
  add
  push argument 1
  call Math.multiply 2
  call Math.multiply 2
  pop local 3
  // while
label WHILE4L1
  push local 3
  push constant 0
  gt
  push local 3
  push argument 0
  lt
  push local 3
  push argument 0
  eq
  or
  and
  not
  if-goto WHILE4L2
  // let
  push local 2
  push constant 1
  add
  pop local 2
  // let
  push local 1
  push local 2
  push constant 1
  add
  push argument 1
  call Math.multiply 2
  call Math.multiply 2
  pop local 3
  goto WHILE4L1
label WHILE4L2
  // let
  push local 1
  push local 2
  call Math.multiply 2
  pop local 3
  // let
  push local 4
  push local 3
  add
  pop local 4
  // let
  push argument 0
  push local 3
  push argument 1
  call Math.multiply 2
  sub
  pop argument 0
  // let
  push local 0
  push constant 1
  sub
  pop local 0
  goto WHILE3L1
label WHILE3L2
  // if
  push local 5
  not
  if-goto IF10L1
  // let
  push local 4
  neg
  pop local 4
  goto IF10L2
label IF10L1
label IF10L2
  // return
  push local 4
  return
function Math.sqrt 3
  // let
  push constant 1
  pop local 0
  // if
  push argument 0
  push constant 10
  lt
  not
  if-goto IF11L1
  // let
  push argument 0
  pop local 1
  goto IF11L2
label IF11L1
  // let
  push argument 0
  push constant 2
  call Math.divide 2
  pop local 1
label IF11L2
  // let
  push local 1
  push local 0
  add
  push constant 2
  call Math.divide 2
  pop local 2
  // while
label WHILE5L1
  push local 1
  push local 0
  sub
  push constant 1
  neg
  eq
  not
  not
  if-goto WHILE5L2
  // if
  push local 2
  push local 2
  call Math.multiply 2
  push argument 0
  eq
  not
  if-goto IF12L1
  // return
  push local 2
  return
  goto IF12L2
label IF12L1
label IF12L2
  // if
  push local 2
  push local 2
  call Math.multiply 2
  push argument 0
  lt
  not
  if-goto IF13L1
  // let
  push local 2
  pop local 0
  goto IF13L2
label IF13L1
  // let
  push local 2
  pop local 1
label IF13L2
  // let
  push local 1
  push local 0
  add
  push constant 2
  call Math.divide 2
  pop local 2
  goto WHILE5L1
label WHILE5L2
  // return
  push local 0
  return
function Math.max 0
  // if
  push argument 0
  push argument 1
  gt
  not
  if-goto IF14L1
  // return
  push argument 0
  return
  goto IF14L2
label IF14L1
  // return
  push argument 1
  return
label IF14L2
function Math.min 0
  // if
  push argument 0
  push argument 1
  lt
  not
  if-goto IF15L1
  // return
  push argument 0
  return
  goto IF15L2
label IF15L1
  // return
  push argument 1
  return
label IF15L2
