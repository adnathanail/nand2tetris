// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, n;

        let twoToThe = Array.new(16);

        let i = 0;
        let n = 1;
        while (i < 16) {
            let twoToThe[i] = n;
            let i = i + 1;
            let n = n + n;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    function boolean bit(int x, int j) {
        return (twoToThe[j] & x) > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, xShifted, i;
        var boolean y_negative;

        if (y < 0) {
            let y = -y;
            let y_negative = true;
        }

        let sum = 0;
        let xShifted = x;
        let i = 0;

        while(i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
        }

        if (y_negative) {
            let sum = - sum;
        }

        return sum;
    }
    
    function int pow(int a, int b) {
        var int out;

        let out = 1;
        while (b > 0) {
            let out = out * a;
            let b = b - 1;
        }

        return out;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // v_base/v_base_pow:
        //  - initialised to the highest power of 10 smaller than the number
        //    - max value of 10,000, because our 16 bit 2's complement numbers
        //      can store values up to 2**15 = 32,765 (16th bit is for negative numbers)
        //      so it can never be 100,000
        //  - descends in powers of 10 (10000 4, 1000 3, 100 2, 10 1, 1 0)
        //    to find out how many of each power of 10 fits in the remaining undivided portion of x
        // v_mult:
        //  - incremented to find the greatest value where v_mult * v_base < x
        // tem:
        //  - used to store temporary values for speeding up comparisons/calculations
        // out:
        //  - accumulates the total output
        // negate_output:
        //  - calculated based on the sign of the inputs
        //    - pos / pos or neg / neg -> pos
        //    - pos / neg or neg / pos -> neg
        //  - inputs are normalised to be positive
        //  - output is then negated depending on the value of this variable

        var int v_base_pow, v_base, v_mult, tem, out;
        var boolean negate_output;

        // normalise inputs to be positive, and determine whether we will later negate the output
        let negate_output = false;
        if (x < 0) {
            let x = -x;
            let negate_output = true;
        }
        if (y < 0) {
            let y = -y;
            let negate_output = ~negate_output;
        }

        // find largest power of 10, smaller than numerator
        if (x < 10) {
            let v_base_pow = 0;
        } else {
            if (x < 100) {
                let v_base_pow = 1;
            } else {
                if (x < 1000) {
                    let v_base_pow = 2;
                } else {
                    if (x < 10000) {
                        let v_base_pow = 3;
                    } else {
                        let v_base_pow = 4;
                    }
                }
            }
        }

        let out = 0;
        // go through descending powers of 10
        while (v_base_pow > (-1)) {
            let v_base = Math.pow(10, v_base_pow);
            let v_mult = 0;

            // find largest v_mult, where v_mult * v_base <= x
            let tem = v_base * ((v_mult + 1) * y);
            while ((tem > 0) & ((tem < x) | (tem = x))) {
                let v_mult = v_mult + 1;
                let tem = v_base * ((v_mult + 1) * y);
            }

            let tem = v_base * v_mult;
            // add to divisor output
            let out = out + tem;
            // remove divided portion from x, so we can divide this new smaller x on the next loop
            let x = x - (tem * y);

            // divide v_base by 10
            let v_base_pow = v_base_pow - 1;
        }

        // negate output if needed
        if (negate_output) {
            let out = -out;
        }

        return out;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int min, max, mdpt;

        let min = 1;
        // TODO is this needed?
        if (x < 10) {
            let max = x;
        } else {
            let max = x / 2;
        }
        let mdpt = (max + min) / 2;

        while(~((max - min) = -1)) {
            if ((mdpt * mdpt) = x) {
                return mdpt;
            }
            if ((mdpt * mdpt) < x) {
                let min = mdpt;
            } else {
                let max = mdpt;
            }
            let mdpt = (max + min)/2;
        }

        return min;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
