// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function boolean getColor() {
        return color;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, x_over_16, modifier;
        let x_over_16 = x / 16;
        // Screen memory starts at 16384
        //   with 32 bytes per row
        //   16 bits per byte
        let address = ((y * 32) + x_over_16) + 16384;

        // Get current value of byte holding the desired pixel
        let value = Memory.peek(address);
        // Create a modifier from x % 16
        // E.g. if x % 16 = 5, we want all zeroes except the 5th bit is 1: 0000000000010000
        let modifier = Math.pow(2, x - (x_over_16 * 16));
        if (color) {
            // For black we or the current value with the modifier, as all existing values will be kept,
            //   and the pixel's bit will either already be 1, or the modifier will provide the 1
            //   to make the or true
            let value = value | modifier;
        } else {
            // For white, the result of -modifier - 1 flips all the bits e.g. for 5 1111111111101111
            //   then anding with this, does a similar process, keeping all our existing bits,
            //   and flipping the pixel's bit
            let value = value & (-modifier - 1);
        }
        do Memory.poke(address, value);
        return;
    }

    // TODO optimise writing full black blocks
    // function int _getPixelBlock(int x, int y) {
    //     let address = ((y * 32) + (x / 16)) + 16384;
    // }

    function void drawHorizontalLine(int x1, int x2, int y) {
        while ((x1 < x2) | (x1 = x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        while ((y1 < y2) | (y1 = y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawDiagonalLineUp(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adxMinusbdy;
        let a = 0;
        let b = 0;
        let adxMinusbdy = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adxMinusbdy < 0) {
                let a = a + 1;
                let adxMinusbdy = adxMinusbdy - dy;
            } else {
                let b = b - 1;
                let adxMinusbdy = adxMinusbdy - dx;
            }
        }
        return;
    }

    function void drawDiagonalLineDown(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adxMinusbdy;
        let a = 0;
        let b = 0;
        let adxMinusbdy = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while ((dx > a) & (dy > b)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adxMinusbdy < 0) {
                let a = a + 1;
                let adxMinusbdy = adxMinusbdy + dy;
            } else {
                let b = b + 1;
                let adxMinusbdy = adxMinusbdy - dx;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int swap;
        // Horizontal line
        if (y1 = y2) {
            // Ensure direction is right to left
            if (x2 < x1) {
                let swap = x2;
                let x2 = x1;
                let x1 = swap;
            }
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if (x1 = x2) {
            // Ensure direction is up to down
            if (y2 < y1) {
                let swap = y2;
                let y2 = y1;
                let y1 = swap;
            }
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        // Ensure direction starts from the left
        if (x2 < x1) {
            let swap = x2;
            let x2 = x1;
            let x1 = swap;
            let swap = y2;
            let y2 = y1;
            let y1 = swap;
        }
        if (y1 < y2) {
            do Screen.drawDiagonalLineDown(x1, y1, x2, y2);
        } else {
            do Screen.drawDiagonalLineUp(x1, y1, x2, y2);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, swap;
        if (y2 < y1) {
            let swap = y2;
            let y2 = y1;
            let y1 = swap;
        }
        if (x2 < x2) {
            let swap = x2;
            let x2 = x1;
            let x1 = swap;
        }
        let y = y1;
        while (y < y2) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt_term;
        // Middle line
        do Screen.drawLine(x - r, y, x + r, y);
        let dy = 1;
        while (dy < (r + 1)) {
            let sqrt_term = Math.sqrt(Math.pow(r, 2) - Math.pow(dy, 2));
            // Line above middle
            do Screen.drawLine(x - sqrt_term, y + dy, x + sqrt_term, y + dy);
            // Line below middle
            do Screen.drawLine(x - sqrt_term, y - dy, x + sqrt_term, y - dy);
            let dy = dy + 1;
        }
        return;
    }
}
