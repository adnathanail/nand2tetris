// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int length, _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let _maxLength = maxLength;
        let length = 0;
        if (_maxLength > 0) {
            let s = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (_maxLength > 0) {
            do s.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > -1) & (j < length)) {
            let s[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~((length + 1) > _maxLength)) {
            let s[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let s[length] = 0;
            let length = length - 1;
        }
        return;
    }

    method int intValueFromIndex(int index) {
        var int v, i, d;
        var boolean running;
        let v = 0;
        let i = index;
        let running = true;
        while ((i < length) & running) {
            let d = s[i];
            if ((d < 48) | (d > 57)) {
                let running = false;
            } else {
                let v = (v * 10) + (d - 48);
            }
            let i = i + 1;
        }
        return v;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        if (length > 0) {
            if (s[0] = 45) {
                return - intValueFromIndex(1);
            }
        }
        return intValueFromIndex(0);
    }

    method void doSetInt(int val) {
        var int lastDigit, c;

        let lastDigit = val - (10 * (val / 10));

        if (val > 9) {
            do doSetInt(val / 10);
        }
        do appendChar(lastDigit + 48);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            do doSetInt(-val);
            return;
        }

        do doSetInt(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
