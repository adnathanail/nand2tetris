// Copyright (c) 2025-03-08 Alex Nathanail
// All rights reserved

/**
 * TODO document
 */

class QuintrisGame {
    // Side length of squares making up the piece in pixels (16)
    static int size;
    // Width and height of screen in px
    static int screen_width_px;
    static int screen_height_px;
    // Width and height of screen in grid blocks
    static int screen_width;
    static int screen_height;

    field PieceBuilder piece_builder;
    // Current active game piece
    field Piece piece;
    // Grid of placed squares
    field Grid grid;

    /** Constructs a new Square Game. */
    constructor QuintrisGame new() {
        // Initialise classes static variables
        let size = 16;
        let screen_width_px = 512;
        let screen_height_px = 256;

        // Calculate some static variables
        let screen_width = screen_width_px / size;
        let screen_height = screen_height_px / size;

        // Initialise piece builder
        let piece_builder = PieceBuilder.new();
        // Create a piece and a grid
        let piece = piece_builder.getRandomPiece(this);
        let grid = Grid.new(this);
        return this;
    }

    method void dispose() {
        do piece.dispose();
        do grid.dispose();
        do piece_builder.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;  // the key currently pressed by the user
        var Array pieceSquares;
        var int i;

        while (true) {
            while (grid.canMove(piece.tryToDrop(), piece.getNumSquares())) {
                // Move the piece down (as attempted in the tryToDrop in the while condition)
                do piece.acceptMove();
                do Sys.wait(50);
                // Check keyboard input
                let key = Keyboard.keyPressed();
                // Up arrow
                if ((key = 131) & grid.canMove(piece.tryToMoveUp(), piece.getNumSquares())) {
                    do piece.acceptMove();
                }
                // Down arrow
                if ((key = 133) & grid.canMove(piece.tryToMoveDown(), piece.getNumSquares())) {
                    do piece.acceptMove();
                }
            }

            let pieceSquares = piece.getCurrentSquares();
            let i = 0;
            while (i < piece.getNumSquares()) {
                do grid.setGridSquare(pieceSquares[i * 2], pieceSquares[(i * 2) + 1]);
                let i = i + 1;
            }
            do piece.dispose();
            do grid.draw();
            let piece = piece_builder.getRandomPiece(this);
        }

        return;
    }

    method int getSize() {
        return size;
    }

    method int getScreenHeight() {
        return screen_height;
    }

    method int getScreenWidth() {
        return screen_width;
    }
}
