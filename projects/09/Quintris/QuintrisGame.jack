// Copyright (c) 2025-03-08 Alex Nathanail
// All rights reserved

/**
 * TODO document
 */

class QuintrisGame {
    // Side length of squares making up the piece in pixels (16)
    static int size;
    // Width and height of screen in px
    static int screen_width_px;
    static int screen_height_px;
    // Width and height of screen in grid blocks
    static int screen_width;
    static int screen_height;

    field PieceBuilder piece_builder;
    // Current active game piece
    field Piece piece;
    // Grid of placed squares
    field Grid grid;
    // Whether the game is over
    field boolean game_over;
    // Game score
    field int score;

    /** Constructs a new Square Game. */
    constructor QuintrisGame new() {
        // Initialise classes static variables
        let size = 16;
        let screen_width_px = 512;
        let screen_height_px = 256;

        // Calculate some static variables
        let screen_width = screen_width_px / size;
        let screen_height = screen_height_px / size;

        // Create a grid
        let grid = Grid.new(this);
        // Initialise game score
        let score = 0;
        return this;
    }

    method void dispose() {
        do piece.dispose();
        do grid.dispose();
        do piece_builder.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;  // the key currently pressed by the user
        var int rand_seed;

        do _showMessage("Press space to start");

        // Use time user takes to start game as a seed for the RNG
        let key = 0;
        let rand_seed = 0;
        while (~(key = 32)) {
            let key = Keyboard.keyPressed();
            let rand_seed = rand_seed + 1;
            do Sys.wait(1);
        }

        // Clear the screen
        do clearScreen();

        // Initialise piece builder with random seed
        let piece_builder = PieceBuilder.new(rand_seed);
        // Get the first piece
        let piece = piece_builder.getRandomPiece(this);

        let game_over = false;

        while (~game_over) {
            // Give a point for each new piece
            do addToScore(1);
            while (grid.canMove(piece.tryToDrop(), piece.getNumSquares())) {
                // Move the piece down (as attempted in the tryToDrop in the while condition)
                do piece.acceptMove();
                do Sys.wait(200);
                // Check keyboard input
                let key = Keyboard.keyPressed();
                // Up arrow
                if ((key = 131) & grid.canMove(piece.tryToMoveUp(), piece.getNumSquares())) {
                    do piece.acceptMove();
                }
                // Down arrow
                if ((key = 133) & grid.canMove(piece.tryToMoveDown(), piece.getNumSquares())) {
                    do piece.acceptMove();
                }
            }

            do grid.copyPieceSquares(piece.getCurrentSquares(), piece.getNumSquares());
            do piece.dispose();
            let piece = piece_builder.getRandomPiece(this);
            if (~grid.canMove(piece.getCurrentSquares(), piece.getNumSquares())) {
                let game_over = true;
            }
        }

        // Show game over message
        do _showMessage("Game over!");

        return;
    }

    method void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, screen_width_px - 1, screen_height_px - 1);
        return;
    }

    method void _showMessage(String message) {
        do Output.moveCursor(12, 10 + (message.length() / 2));
        do Output.printString(message);
        return;
    }

    method int getSize() {
        return size;
    }

    method int getScreenHeight() {
        return screen_height;
    }

    method int getScreenWidth() {
        return screen_width;
    }

    method void addToScore(int points) {
        let score = score + points;
        do Output.moveCursor(22, 1);
        do Output.printString("Score: ");
        do Output.printInt(score);
        return;
    }
}
