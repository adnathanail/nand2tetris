// Copyright (c) 2025-03-08 Alex Nathanail
// All rights reserved

/** The grid of placed Quintris pieces */
class Grid {
    field QuintrisGame game;
    // Flattened width*height Array of which squares are filled
    //    e.g. (1, 1, 1, ..., 1, 0, 1, ..., 1, 1, 1, ..., ...)
    //    represents the 2D array ((1, 1, 1, ...), (1, 0, 1, ...), (1, 1, 1, ...), ...)
    //    and forms a empty square in the top left
    field Array grid;

    /** Constructs a new square with a given location and size. */
    constructor Grid new(QuintrisGame _game) {
        var int i;

        let game = _game;

        // Create grid of squares
        let grid = Array.new(game.getScreenWidth() * game.getScreenHeight());
        // Initialise grid to zeroes;
        let i = 0;
        while (i < game.getScreenWidth() * game.getScreenHeight()) {
            let grid[i] = 0;
            let i = i + 1;
        }

        // Draw grid on the screen
        do draw();
        return this;
    }

    method void dispose() {
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the grid on the screen. */
    method void draw() {
        var int i;

        var int square_x;
        var int square_y;

        do Screen.setColor(true);
        let i = 0;
        while (i < (game.getScreenWidth() * game.getScreenHeight())) {
            if (grid[i] = 1) {
                let square_y = i / game.getScreenWidth();
                let square_x = i - (square_y * game.getScreenWidth());
                do Screen.drawRectangle(square_x * game.getSize() + 1, square_y * game.getSize() + 1, (square_x + 1) * game.getSize() - 1, (square_y + 1) * game.getSize() - 1);
            }
            let i = i + 1;
        }
        return;
    }

    method void setGridSquare(int x, int y, int enable) {
        let grid[x + (y * game.getScreenWidth())] = enable;
        return;
    }

    method boolean getGridSquare(int x, int y) {
        return grid[x + (y * game.getScreenWidth())];
    }

    method boolean canMove(Array squares, int num_squares) {
        var int i;

        let i = 0;
        while (i < num_squares) {
            // Check x value isn't too big (right edge)
            if (squares[i * 2] > (game.getScreenWidth() - 1)) {
                return false;
            }
            // Check y value isn't too small (top edge)
            if (squares[(i * 2) + 1] < 0) {
                return false;
            }
            // Check y value isn't too big (bottom edge)
            if (squares[(i * 2) + 1] > (game.getScreenHeight() - 1)) {
                return false;
            }
            // Check square isn't filled
            if (getGridSquare(squares[i * 2], squares[(i * 2) + 1]) = 1) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    method void copyPieceSquares(Array squares, int num_squares) {
        var int i;
        let i = 0;
        while (i < num_squares) {
            do setGridSquare(squares[i * 2], squares[(i * 2) + 1], 1);
            let i = i + 1;
        }
        do checkForLines();
        do game.clearScreen();
        do draw();
        return;
    }

    method void checkLine(int x, int y_start, int line_length) {
        var int y;
        if (line_length < 6) {
            return;
        }
        let y = y_start;
        while (y < (y_start + line_length)) {
            do setGridSquare(x, y, 0);
            let y = y + 1;
        }
        do game.addToScore(line_length);
        return;
    }

    method void checkForLines() {
        var int x;
        var int y;
        var int line_length;
        var boolean prev_filled;
        var int temp;

        let prev_filled = false;

        let x = 0;
        while (x < game.getScreenWidth()) {
            let y = 0;
            while (y < game.getScreenHeight()) {
                if (getGridSquare(x, y) = 1) {
                    if (prev_filled) {
                        let line_length = line_length + 1;
                    } else {
                        let line_length = 1;
                        let prev_filled = true;
                    }
                } else {
                    if (prev_filled) {
                        do checkLine(x, y - line_length, line_length);
                        let prev_filled = false;
                    }
                }
                let y = y + 1;
            }
            // Check for a complete line at the bottom of the screen
            do checkLine(x, y - line_length, line_length);
            let prev_filled = false;
            let x = x + 1;
        }
        return;
    }
}
