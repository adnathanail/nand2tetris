// Copyright (c) 2025-03-08 Alex Nathanail
// All rights reserved

/** A single Quintris piece */
class Piece {
   // Side length of squares making up the piece in pixels (16)
   static int size;
   // Number of squares per piece (5)
   static int num_squares;
   static int screen_width_px;
   static int screen_width;

   // Location of the square's top-left corner, in grid units relative to size
   //   (e.g. x = 3, is 16 * 3 = 48 in pixels)
   field int x, y;
   // Array of 2D arrays of relative offsets to create a multi-square shape
   //   (e.g. ((0, 0), (0, 1), (0, 2), (0, 3) (1, 3)) is an L shape
   field Array squares;
   field int width;

   function void init_static() {
      // Initialise classes static variables (should be called only once)
      let size = 16;
      let num_squares = 5;
      let screen_width_px = 512;

      let screen_width = screen_width_px / size;

      return;
   }

   /** Constructs a new square with a given location and size. */
   constructor Piece new() {
      // Used to temporarily store an inner array in a 2D array to allow indexing
      //   as an_array[0][0] is invalid syntax
      var Array two_d_helper;

      // Initialise pieces starting position
      let x = 0;
      let y = 0;

      // Initialise array of square offsets
      let squares = Array.new(num_squares);

      let squares[0] = Array.new(2);
      let two_d_helper = squares[0];
      let two_d_helper[0] = 0;
      let two_d_helper[1] = 0;

      let squares[1] = Array.new(2);
      let two_d_helper = squares[1];
      let two_d_helper[0] = 1;
      let two_d_helper[1] = 0;

      let squares[2] = Array.new(2);
      let two_d_helper = squares[2];
      let two_d_helper[0] = 0;
      let two_d_helper[1] = 1;

      let squares[3] = Array.new(2);
      let two_d_helper = squares[3];
      let two_d_helper[0] = 1;
      let two_d_helper[1] = 1;

      let squares[4] = Array.new(2);
      let two_d_helper = squares[4];
      let two_d_helper[0] = 2;
      let two_d_helper[1] = 0;

      let width = 3;

      // Draw piece on the screen
      do draw(true);
      return this;
   }

   /** Disposes this piece. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the piece on the screen. */
   method void draw(boolean color) {
      var int i;
      var Array two_d_helper;

      var int square_x;
      var int square_y;

      do Screen.setColor(color);
      let i = 0;
      while (i < num_squares) {
         let two_d_helper = squares[i];
         let square_x = x + two_d_helper[0];
         let square_y = y + two_d_helper[1];
         do Screen.drawRectangle(square_x * size + 1, square_y * size + 1, (square_x + 1) * size - 1, (square_y + 1) * size - 1);
         let i = i + 1;
      }
      return;
   }

   method boolean canMove() {
      return (x + width) < screen_width;
   }

   method void move() {
      do draw(false);
      let x = x + 1;
      do draw(true);
      return;
   }
}
