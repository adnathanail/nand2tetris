// Copyright (c) 2025-03-08 Alex Nathanail
// All rights reserved

// Pieces reference
// https://www.reddit.com/r/Tetris/comments/18zyfyu/would_it_be_more_difficult_or_easy_if_its_a_5/

// TODO randomise rotation
// TODO randomise y position
// TODO randomise reflection

/** Utility class to generate random pieces */
class PieceBuilder {
    field Random rnd;
    field int num_squares;

    constructor PieceBuilder new() {
        let rnd = Random.new();
        let num_squares = 5;
        return this;
    }

    method void dispose() {
        do rnd.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void _setSquare(Array squares, int square_index, int x, int y) {
        let squares[square_index * 2] = x;
        let squares[(square_index * 2) + 1] = y;

        return;
    }

    method Piece getRandomPiece(QuintrisGame game) {
        var Array squares;
        var int squares_type;

        let squares = Array.new(num_squares * 2);
        let squares_type = rnd.getRandomUpTo(12);

        if (squares_type = 0) {
            do _setSquares1(squares);
        }
        if (squares_type = 1) {
            do _setSquares2(squares);
        }
        if (squares_type = 2) {
            do _setSquares3(squares);
        }
        if (squares_type = 3) {
            do _setSquares4(squares);
        }
        if (squares_type = 4) {
            do _setSquares5(squares);
        }
        if (squares_type = 5) {
            do _setSquares6(squares);
        }
        if (squares_type = 6) {
            do _setSquares7(squares);
        }
        if (squares_type = 7) {
            do _setSquares8(squares);
        }
        if (squares_type = 8) {
            do _setSquares9(squares);
        }
        if (squares_type = 9) {
            do _setSquares10(squares);
        }
        if (squares_type = 10) {
            do _setSquares11(squares);
        }
        if (squares_type = 11) {
            do _setSquares12(squares);
        }

        return Piece.new(game, num_squares, squares);
    }

    method void _setSquares1(Array squares) {
        // X
        // X
        // X
        // X
        // X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 0, 2);
        do _setSquare(squares, 3, 0, 3);
        do _setSquare(squares, 4, 0, 4);

        return;
    }

    method void _setSquares2(Array squares) {
        // X
        // X
        // X
        // X X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 0, 2);
        do _setSquare(squares, 3, 0, 3);
        do _setSquare(squares, 4, 1, 3);

        return;
    }

    method void _setSquares3(Array squares) {
        // X
        // X
        // X X
        //   X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 0, 2);
        do _setSquare(squares, 3, 1, 2);
        do _setSquare(squares, 4, 1, 3);

        return;
    }

    method void _setSquares4(Array squares) {
        // X X
        // X X
        // X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 1, 0);
        do _setSquare(squares, 2, 0, 1);
        do _setSquare(squares, 3, 1, 1);
        do _setSquare(squares, 4, 0, 2);

        return;
    }

    method void _setSquares5(Array squares) {
        // X X X
        //   X
        //   X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 1, 0);
        do _setSquare(squares, 2, 2, 0);
        do _setSquare(squares, 3, 1, 1);
        do _setSquare(squares, 4, 1, 2);

        return;
    }

    method void _setSquares6(Array squares) {
        // X   X
        // X X X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 2, 0);
        do _setSquare(squares, 2, 0, 1);
        do _setSquare(squares, 3, 1, 1);
        do _setSquare(squares, 4, 2, 1);

        return;
    }

    method void _setSquares7(Array squares) {
        //   X X
        // X X
        //   X
        do _setSquare(squares, 0, 1, 0);
        do _setSquare(squares, 1, 2, 0);
        do _setSquare(squares, 2, 0, 1);
        do _setSquare(squares, 3, 1, 1);
        do _setSquare(squares, 4, 1, 2);

        return;
    }

    method void _setSquares8(Array squares) {
        // X
        // X
        // X X X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 0, 2);
        do _setSquare(squares, 3, 1, 2);
        do _setSquare(squares, 4, 2, 2);

        return;
    }

    method void _setSquares9(Array squares) {
        // X
        // X X
        //   X X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 1, 1);
        do _setSquare(squares, 3, 1, 2);
        do _setSquare(squares, 4, 2, 2);

        return;
    }

    method void _setSquares10(Array squares) {
        //   X
        // X X X
        //   X
        do _setSquare(squares, 0, 1, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 1, 1);
        do _setSquare(squares, 3, 2, 1);
        do _setSquare(squares, 4, 1, 2);

        return;
    }

    method void _setSquares11(Array squares) {
        //   X
        // X X
        //   X
        //   X
        do _setSquare(squares, 0, 1, 0);
        do _setSquare(squares, 1, 0, 1);
        do _setSquare(squares, 2, 1, 1);
        do _setSquare(squares, 3, 1, 2);
        do _setSquare(squares, 4, 1, 3);

        return;
    }

    method void _setSquares12(Array squares) {
        // X X
        //   X
        //   X X
        do _setSquare(squares, 0, 0, 0);
        do _setSquare(squares, 1, 1, 0);
        do _setSquare(squares, 2, 1, 1);
        do _setSquare(squares, 3, 1, 2);
        do _setSquare(squares, 4, 2, 2);

        return;
    }
}
