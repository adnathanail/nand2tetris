function Ball.new 0
  push constant 15
  call Memory.alloc 1
  pop pointer 0
  // let
  push argument 0
  pop this 0
  // let
  push argument 1
  pop this 1
  // let
  push argument 2
  pop this 10
  // let
  push argument 3
  push constant 6
  sub
  pop this 11
  // let
  push argument 4
  pop this 12
  // let
  push argument 5
  push constant 6
  sub
  pop this 13
  // let
  push constant 0
  pop this 14
  // do
  push pointer 0
  call Ball.show 1
  pop temp 0
  // return
  push pointer 0
  return
function Ball.dispose 0
  push argument 0
  pop pointer 0
  // do
  push pointer 0
  call Memory.deAlloc 1
  pop temp 0
  // return
  push constant 0
  return
function Ball.show 0
  push argument 0
  pop pointer 0
  // do
  push constant 1
  neg
  call Screen.setColor 1
  pop temp 0
  // do
  push pointer 0
  call Ball.draw 1
  pop temp 0
  // return
  push constant 0
  return
function Ball.hide 0
  push argument 0
  pop pointer 0
  // do
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do
  push pointer 0
  call Ball.draw 1
  pop temp 0
  // return
  push constant 0
  return
function Ball.draw 0
  push argument 0
  pop pointer 0
  // do
  push this 0
  push this 1
  push this 0
  push constant 5
  add
  push this 1
  push constant 5
  add
  call Screen.drawRectangle 4
  pop temp 0
  // return
  push constant 0
  return
function Ball.getLeft 0
  push argument 0
  pop pointer 0
  // return
  push this 0
  return
function Ball.getRight 0
  push argument 0
  pop pointer 0
  // return
  push this 0
  push constant 5
  add
  return
function Ball.setDestination 3
  push argument 0
  pop pointer 0
  // let
  push argument 1
  push this 0
  sub
  pop this 2
  // let
  push argument 2
  push this 1
  sub
  pop this 3
  // let
  push this 2
  call Math.abs 1
  pop local 0
  // let
  push this 3
  call Math.abs 1
  pop local 1
  // let
  push local 0
  push local 1
  lt
  pop this 7
  // if
  push this 7
  not
  if-goto IF0L1
  // let
  push local 0
  pop local 2
  // let
  push local 1
  pop local 0
  // let
  push local 2
  pop local 1
  // let
  push this 1
  push argument 2
  lt
  pop this 8
  // let
  push this 0
  push argument 1
  lt
  pop this 9
  goto IF0L2
label IF0L1
  // let
  push this 0
  push argument 1
  lt
  pop this 8
  // let
  push this 1
  push argument 2
  lt
  pop this 9
label IF0L2
  // let
  push constant 2
  push local 1
  call Math.multiply 2
  push local 0
  sub
  pop this 4
  // let
  push constant 2
  push local 1
  call Math.multiply 2
  pop this 5
  // let
  push constant 2
  push local 1
  push local 0
  sub
  call Math.multiply 2
  pop this 6
  // return
  push constant 0
  return
function Ball.move 0
  push argument 0
  pop pointer 0
  // do
  push pointer 0
  call Ball.hide 1
  pop temp 0
  // if
  push this 4
  push constant 0
  lt
  not
  if-goto IF1L1
  // let
  push this 4
  push this 5
  add
  pop this 4
  goto IF1L2
label IF1L1
  // let
  push this 4
  push this 6
  add
  pop this 4
  // if
  push this 9
  not
  if-goto IF2L1
  // if
  push this 7
  not
  if-goto IF3L1
  // let
  push this 0
  push constant 4
  add
  pop this 0
  goto IF3L2
label IF3L1
  // let
  push this 1
  push constant 4
  add
  pop this 1
label IF3L2
  goto IF2L2
label IF2L1
  // if
  push this 7
  not
  if-goto IF4L1
  // let
  push this 0
  push constant 4
  sub
  pop this 0
  goto IF4L2
label IF4L1
  // let
  push this 1
  push constant 4
  sub
  pop this 1
label IF4L2
label IF2L2
label IF1L2
  // if
  push this 8
  not
  if-goto IF5L1
  // if
  push this 7
  not
  if-goto IF6L1
  // let
  push this 1
  push constant 4
  add
  pop this 1
  goto IF6L2
label IF6L1
  // let
  push this 0
  push constant 4
  add
  pop this 0
label IF6L2
  goto IF5L2
label IF5L1
  // if
  push this 7
  not
  if-goto IF7L1
  // let
  push this 1
  push constant 4
  sub
  pop this 1
  goto IF7L2
label IF7L1
  // let
  push this 0
  push constant 4
  sub
  pop this 0
label IF7L2
label IF5L2
  // if
  push this 0
  push this 10
  gt
  not
  not
  if-goto IF8L1
  // let
  push constant 1
  pop this 14
  // let
  push this 10
  pop this 0
  goto IF8L2
label IF8L1
label IF8L2
  // if
  push this 0
  push this 11
  lt
  not
  not
  if-goto IF9L1
  // let
  push constant 2
  pop this 14
  // let
  push this 11
  pop this 0
  goto IF9L2
label IF9L1
label IF9L2
  // if
  push this 1
  push this 12
  gt
  not
  not
  if-goto IF10L1
  // let
  push constant 3
  pop this 14
  // let
  push this 12
  pop this 1
  goto IF10L2
label IF10L1
label IF10L2
  // if
  push this 1
  push this 13
  lt
  not
  not
  if-goto IF11L1
  // let
  push constant 4
  pop this 14
  // let
  push this 13
  pop this 1
  goto IF11L2
label IF11L1
label IF11L2
  // do
  push pointer 0
  call Ball.show 1
  pop temp 0
  // return
  push this 14
  return
function Ball.bounce 5
  push argument 0
  pop pointer 0
  // let
  push this 2
  push constant 10
  call Math.divide 2
  pop local 2
  // let
  push this 3
  push constant 10
  call Math.divide 2
  pop local 3
  // if
  push argument 1
  push constant 0
  eq
  not
  if-goto IF12L1
  // let
  push constant 10
  pop local 4
  goto IF12L2
label IF12L1
  // if
  push this 2
  push constant 0
  lt
  not
  push argument 1
  push constant 1
  eq
  and
  push this 2
  push constant 0
  lt
  push argument 1
  push constant 1
  neg
  eq
  and
  or
  not
  if-goto IF13L1
  // let
  push constant 20
  pop local 4
  goto IF13L2
label IF13L1
  // let
  push constant 5
  pop local 4
label IF13L2
label IF12L2
  // if
  push this 14
  push constant 1
  eq
  not
  if-goto IF14L1
  // let
  push constant 506
  pop local 0
  // let
  push local 3
  push constant 50
  neg
  call Math.multiply 2
  push local 2
  call Math.divide 2
  pop local 1
  // let
  push this 1
  push local 1
  push local 4
  call Math.multiply 2
  add
  pop local 1
  goto IF14L2
label IF14L1
  // if
  push this 14
  push constant 2
  eq
  not
  if-goto IF15L1
  // let
  push constant 0
  pop local 0
  // let
  push local 3
  push constant 50
  call Math.multiply 2
  push local 2
  call Math.divide 2
  pop local 1
  // let
  push this 1
  push local 1
  push local 4
  call Math.multiply 2
  add
  pop local 1
  goto IF15L2
label IF15L1
  // if
  push this 14
  push constant 3
  eq
  not
  if-goto IF16L1
  // let
  push constant 250
  pop local 1
  // let
  push local 2
  push constant 25
  neg
  call Math.multiply 2
  push local 3
  call Math.divide 2
  pop local 0
  // let
  push this 0
  push local 0
  push local 4
  call Math.multiply 2
  add
  pop local 0
  goto IF16L2
label IF16L1
  // let
  push constant 0
  pop local 1
  // let
  push local 2
  push constant 25
  call Math.multiply 2
  push local 3
  call Math.divide 2
  pop local 0
  // let
  push this 0
  push local 0
  push local 4
  call Math.multiply 2
  add
  pop local 0
label IF16L2
label IF15L2
label IF14L2
  // do
  push pointer 0
  push local 0
  push local 1
  call Ball.setDestination 3
  pop temp 0
  // return
  push constant 0
  return
