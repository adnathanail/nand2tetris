// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux16(in=instruction, sel=instruction[15], a=ainstruction, b[12]=cinstruction12, b[11]=cinstruction11, b[10]=cinstruction10, b[9]=cinstruction9, b[8]=cinstruction8, b[7]=cinstruction7, b[6]=cinstruction6, b[5]=cinstruction5, b[4]=cinstruction4, b[3]=cinstruction3, b[2]=cinstruction2, b[1]=cinstruction1, b[0]=cinstruction0);

    Mux16(a=outA, b=inM, sel=cinstruction12, out=AorM);
    ALU(x=outD, y=AorM, zx=cinstruction11, nx=cinstruction10, zy=cinstruction9, ny=cinstruction8, f=cinstruction7, no=cinstruction6, out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // A
    Mux16(a=ainstruction, b=aluOut, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=cinstruction5, out=loadA);
    Register(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    // D
    Register(in=aluOut, load=cinstruction4, out=outD);
    Mux(a=false, b=true, sel=cinstruction3, out=writeM);

    And(a=aluNg, b=cinstruction2, out=jump1);
    And(a=aluZr, b=cinstruction1, out=jump2);
    Or(a=aluNg, b=aluZr, out=aluNgZr);
    Not(in=aluNgZr, out=aluPo);
    And(a=aluPo, b=cinstruction0, out=jump3);

    Or(a=jump1, b=jump2, out=jump12);
    Or(a=jump12, b=jump3, out=jump123);
    And(a=jump123, b=instruction[15], out=doJump);

    PC(in=outA, load=doJump, inc=true, reset=reset, out[0..14]=pc);
}